<project name="MAIN" default="Installation"  basedir=".">
 
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- Properties expected:                                                 -->
  <!--   proj            (project)                                          -->
  <!--   vers            (version)                                          -->
  <!--   comp            (component: either "" or "/componentname")         -->
  <!--   projectsDir                                                        -->
  <!--   targetDir                                                          -->
  <!--   append                                                             -->
  <!--   clean           (recompile all java)                               -->
  <!--   checkout                                                           -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->



  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooo  Main Targets ooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->


  <target name="install" depends="InstallInit">
    <ant antfile="../${proj}/build.xml" target="${proj}${comp}-Installation">
      <property name="project" value="${proj}"/>
    </ant>

    <replace dir="${targetDir}/bin" 
             propertyFile="${targetDir}/config/install.prop" > 
      <include name="**/*" />
      <replacefilter token="@perl@" property="perl"/>
    </replace> 

    <!-- because the replace task clobbers permissions.  see ant bug #5661 -->
    <chmod perm="+x">
      <fileset dir="${targetDir}/bin"/>
    </chmod>

  </target>  


  <target name="webinstall" depends="WebInstallInit">
    <ant antfile="../${proj}/build.xml" target="${proj}${comp}-WebInstallation">
      <property name="project" value="${proj}"/>
    </ant>
  </target>  

  <target name="release">
    <ant antfile="../${proj}/build.xml" target="${proj}-Release">
      <property name="project" value="${proj}"/>
    </ant>
  </target>  


  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooo  Initialization ooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->

  <target name="InstallInit" depends="validateTargetDir, checkoutProj,
                                     validateClean,  installConfigFile,
                                     deleteOldJars"/>

  <target name="WebInstallInit" depends="validateTargetDir, checkoutProj,
                                     validateClean"/>

  <target name="validateTargetDir">
    <fail unless="targetDir">
       Must provide -DtargetDir= property to specify where to build to
    </fail>

    <condition property="targetDirExists">
       <and>
         <available file="${targetDir}" />
         <isfalse value="${append}" />
       </and>
    </condition>  

    <fail if="targetDirExists">
      Error: Target directory ${targetDir} already exists and you have not set the 'append' property to true
    </fail>
  </target>  


   <target name="validateClean" if="clean" depends="checkEmptyComponent">
     <fail if="notEmptyComponent">
         Build Error:  Cannot use -clean when building a specific component.  Either build the entire ${proj} project or build ${proj}${comp} without using "clean"
     </fail>
   <echo message="inside validateClean, comp is ${comp} and clean is ${clean}"/>
   </target>

   <target name="checkEmptyComponent">
     <condition property="notEmptyComponent">
       <not>
         <equals arg1="${comp}" arg2=""/>
       </not>
     </condition>
   </target>

   <target name="deleteOldJars" if="clean">
     <delete>
       <fileset dir="${targetDir}/lib/java" includes="*.jar"/>
     </delete>
   </target>

  <target name="installConfigFile">
    <ant target="configFile">
      <property name="cFileName" value="install.prop"/>
      <property name="cFileSrcDir" value="${projectsDir}/install/config"/>
    </ant>
  </target>  


  <target name="checkoutProj" if="checkout">
    <antcall target="cvsCheckOut">
      <param name="package" value="${proj}"/>
    </antcall>
  </target>  


  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooo  SUBROUTINES  ooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->


  <!-- oooooooooooooooooooo default project install ooooooooooooooooooooooo -->

  <target name="defaultProjectInstall">
    <concat destfile="${targetDir}/versions" append="yes">
      <fileset dir="${projectsDir}/${project}" >
         <include name="version"/>
      </fileset>
    </concat>
  </target>


  <!-- ooooooooooooooooooo default component install oooooooooooooooooooooo -->

  <target name="defaultComponentInstall">
    <property name="componentDir" value="${projectsDir}/${project}/${component}"/>

    <echo message="."/>
    <echo message="Installing ${project}/${component}"/>

    <available property="componentAvail" file="${projectsDir}/${project}/${component}"/>
    <fail unless="componentAvail">
       Component directory ${projectsDir}/${project}/${component} not found.
    </fail>

    <antcall target="componentPartCopy">
      <param name="part" value="bin"/>
      <param name="to" value="bin"/>
      <param name="prefix" value=""/>
    </antcall>

    <chmod perm="+x">
      <fileset dir="${targetDir}/bin"/>
    </chmod>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/perl"/>
      <param name="to" value="lib/perl"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/R"/>
      <param name="to" value="lib/R"/>
      <param name="prefix" value="${component}/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/java"/>
      <param name="to" value="lib/java"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="plugin/perl"/>
      <param name="to" value="lib/perl"/>
      <param name="prefix" value="${project}/${component}/Plugin/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="plugin"/>
      <param name="to" value="lib"/>
      <param name="exclude" value="perl"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="config"/>
      <param name="to" value="config"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="doc"/>
      <param name="to" value="doc"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="test"/>
      <param name="to" value="test"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>
       
   <antcall target="defaultJavaCompile"/>
   
   <antcall target="componentPartCopy">
      <param name="part" value="data"/>
      <param name="to" value="data"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

  </target>  


  <target name="defaultJavaCompile" if="hasJava" unless="skipJava" 
                                    depends="deleteMyClasses, checkIfHaveJava">
     <mkdir dir="${projectsDir}/${project}/${component}/classes"/>
     <mkdir dir="${targetDir}/lib/java"/>
     <javac srcdir="${projectsDir}/${project}/${component}/src/java" 
            destdir="${projectsDir}/${project}/${component}/classes"
	    fork="true"
	    memoryMaximumSize="128m">
        <classpath>
           <fileset dir="${targetDir}/lib/java/">
              <include name="*.jar"/>
           </fileset>
        </classpath>
     </javac>
     <jar basedir="${projectsDir}/${project}/${component}/classes" 
          destfile="${targetDir}/lib/java/${project}-${component}.jar"/>
  </target>   


  <target name="checkIfHaveJava">
      <available property="hasJava" 
                 file="${projectsDir}/${project}/${component}/src/java"/>
  </target>


  <target name="checkIfCleanAndHaveJava" depends="checkIfHaveJava">
       <condition property="cleanAndHasJava">
          <and>
             <isset property="hasJava"/>
             <isset property="clean"/>
          </and>
       </condition>
  </target>


   <target name="deleteMyClasses" if="cleanAndHasJava" 
           depends="checkIfCleanAndHaveJava">
    <delete>
        <fileset dir="${projectsDir}/${project}/${component}/classes"/>
     </delete>
    <echo message="deleted all old classes, clean is ${clean} and has java is ${hasJava}"/>
  </target>


  <!-- oooooooooooooooooooo default web install ooooooooooooooooooooooooooo -->

  <target name="defaultWebComponentInstall">
    <property name="componentDir" value="${projectsDir}/${project}/${component}"/>

    <echo message="."/>
    <echo message="Installing ${project}/${component}"/>

    <available property="componentAvail" file="${projectsDir}/${project}/${component}"/>
    <fail unless="componentAvail">
       Component directory ${projectsDir}/${project}/${component} not found.
    </fail>

    <antcall target="webComponentPartCopy">
      <param name="part" value="htdocs"/>
      <param name="to" value="${htdocsTargetDir}"/>
    </antcall>

    <antcall target="webComponentPartCopy">
      <param name="part" value="cgi-bin"/>
      <param name="to" value="${cgibinTargetDir}"/>
    </antcall>

    <antcall target="webComponentPartCopy">
      <param name="part" value="servlets"/>
      <param name="to" value="${servletsTargetDir}"/>
    </antcall>

  </target>  


  <!-- oooooooooooooooooooo utility subroutines  ooooooooooooooooooooooo -->

  <target name="componentPartCopy">
    <available property="partAvailable" file="${componentDir}/${part}"/>
    <antcall target="componentPartCopySub"/>
  </target>  

  <target name="componentPartCopySub" if="partAvailable">
    <mkdir dir="${targetDir}/${to}/${prefix}"/>
    <copy todir="${targetDir}/${to}/${prefix}">
      <fileset dir="${componentDir}/${part}" >
        <include name="**"/>
        <exclude name="**/CVS/*" />
        <exclude name="${exclude}/" />
      </fileset>
    </copy>
  </target>  

  <target name="webComponentPartCopy">
    <available property="partAvailable" file="${componentDir}/${part}"/>
    <antcall target="webComponentPartCopySub"/>
  </target>  

  <target name="webComponentPartCopySub" if="partAvailable">
    <mkdir dir="${to}"/>
    <copy todir="${to}">
      <fileset dir="${componentDir}/${part}" >
        <include name="**"/>
        <exclude name="**/CVS/*" />
        <exclude name="${exclude}/" />
      </fileset>
    </copy>
  </target>  

  <target name="configFile">
    <property name="cFile" value="${cFileSrcDir}/${cFileName}"/>
    <property name="cFileTarget" value="${targetDir}/config/${cFileName}"/>

    <copy file="${cFile}.sample" toDir="${targetDir}/config"/>

    <available file="${cFileTarget}" property="cFileTargetExists"/>

    <fail unless="cFileTargetExists">
      Error: You must configure the file ${cFileTarget}.  To create it, copy ${cFileTarget}.sample to ${cFileTarget} and edit ${cFileTarget}, giving it the proper values for your installation. 
    </fail>
  </target>  

 
  
  <!-- oooooooooooooooooooo default project release ooooooooooooooooooooooo -->

  <target name="defaultProjectRelease">

    <delete quiet="true">
        <fileset dir="${projectsDir}/cleanroom"/>
    </delete>
    <mkdir dir="${projectsDir}/cleanroom"/>

    <cvs  cvsRoot="${cvsroot}" command="rtag ${tag} ${project}"/>

    <cvs package="${project}" tag="${tag}" cvsRoot="${cvsroot}" 
         dest="${projectsDir}/cleanroom" />
    
    <property name="tarfile" 
              value="${projectsDir}/cleanroom/${project}_${tag}.tar"/>

    <tar destfile="${tarfile}" 
         basedir="${projectsDir}/cleanroom"
         excludes="**/CVS/**"/>

    <gzip zipfile="${tarfile}.gz" src="${tarfile}"/>

  </target>

</project>


