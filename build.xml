<project name="MAIN" default="install" basedir="."
  xmlns:artifact="antlib:org.apache.maven.artifact.ant">
 
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- Properties expected:                                                         -->
  <!--   proj            (project)                                                  -->
  <!--   vers            (version)                                                  -->
  <!--   comp            (component)                                                -->
  <!--   gusConfigFile                                                              -->
  <!--   projectsDir                                                                -->
  <!--   clean                                                                      -->
  <!--   installDBSchema                                                            -->
  <!--   append                                                                     -->
  <!--   webPropFile                                                                -->
  <!--   tag                                                                        -->
  <!--   installConfigFile  optional, installs $GUS_HOME/gus.config from sample     -->
  <!--   projectsDir                                                                -->
  <!--   svnurl             must present in dependent checkout targets              -->
  <!--   excludeChildren    optional, only presents in dependent checkout targets   -->
  <!--   useBranch          optional, only presents in dependent checkout targets   -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->

  <!-- oooooooooooooooooooo Define additional resources oooooooooooooooooooo -->

  <path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.3.jar" />
  <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
           uri="antlib:org.apache.maven.artifact.ant"
           classpathref="maven-ant-tasks.classpath"/>
  
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooo  Main Targets ooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->

  <target name="install" depends="InstallInit">

    <!-- TEST -->
    <echo> proj=${proj} </echo>
    <echo> comp=${comp} </echo>
    <property name="initialTarget" value="install"/>
    
    <ant antfile="../${proj}/build.xml" target="${proj}${comp}-Installation">
      <property name="project" value="${proj}"/>
      <property name="logger" value="${logger}"/>
    </ant>

    <replace dir="${targetDir}/bin" 
             propertyFile="${targetDir}/config/gus.config" > 
      <include name="**/*" />
      <replacefilter token="@perl@" property="perl"/>
      <replacefilter token="@targetDir@" value="${targetDir}" />
    </replace> 

    <!-- because the replace task clobbers permissions.  see ant bug #5661 -->
    <chmod perm="a+x">
      <fileset dir="${targetDir}/bin"/>
    </chmod>

    <echo message="Installation Complete"/>

  </target>


  <target name="webinstall" depends="WebInstallInit">    
    <property name="initialTarget" value="webinstall"/>

    <ant antfile="../${proj}/build.xml" target="${proj}${comp}-WebInstallation">
      <property name="project" value="${proj}"/>
    </ant>



    <antcall target="webinstall-postprocess" />
    
    <echo message="WebInstallation Complete"/>

  </target>  

  <target name="release">
    <ant antfile="../${proj}/build.xml" target="${proj}-Release">
      <property name="project" value="${proj}"/>
    </ant>
  </target>  

  <target name="checkout">
    <!-- detect if the project exist -->
    <available property="project.present" file="${projectsDir}/${proj}" type="dir" />
    <!-- do not check out existing project -->
    <fail if="project.present">${proj} has already been checked out.</fail>
    
    <!-- otherwise, check out the project -->
    <ant target="defaultProjectCheckout">
      <property name="svnurl" value="${topsvnurl}"/>
      <property name="project" value="${proj}"/>
      <property name="version" value="${vers}"/>
    </ant>
  </target>  

  <target name="update">
    <!-- update the project itself -->
    <ant target="defaultProjectUpdate">
      <property name="project" value="${proj}"/>
    </ant>
  </target>

  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooo  Initialization ooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->

  <target name="InstallInit" depends="validateTargetDir, checkoutProj,
                                     validateClean, hasConfigFile, selfBuildInfo"/>

  <target name="WebInstallInit" depends="validateTargetDir, checkoutProj,
                                     validateClean, hasConfigFile, selfBuildInfo"/>

  <target name="validateTargetDir">
    <fail unless="targetDir">
       Must provide -DtargetDir= property to specify where to build to
    </fail>

    <condition property="targetDirExists">
       <and>
         <available file="${targetDir}" />
         <isfalse value="${append}" />
       </and>
    </condition>  

    <fail if="targetDirExists">
      Error: Target directory ${targetDir} already exists and you have not set the 'append' property to true
    </fail>
  </target>

   <target name="validateClean" if="clean" depends="checkEmptyComponent">
      <fail if="notEmptyComponent">
         Build Error:  Cannot use -clean when building a specific component.  Either build the entire ${proj} project or build ${proj}${comp} without using "clean"
     </fail>
   <echo message="inside validateClean, comp is ${comp} and clean is ${clean}"/>
   </target>

   <target name="checkEmptyComponent">
     <condition property="notEmptyComponent">
       <not>
         <equals arg1="${comp}" arg2=""/>
       </not>
     </condition>
   </target>

   <target name="deleteOldJars" if="clean">
     <delete>
       <fileset dir="${targetDir}/lib/java" includes="*.jar"/>
     </delete>
     <delete>
       <fileset dir="${targetDir}/lib/java/db_driver" includes="*.jar"/>
     </delete>
     <delete>
       <fileset dir="${targetDir}/lib/java/not-deployed" includes="*.jar"/>
     </delete>
     <delete>
       <fileset dir="${targetDir}/lib/java" includes="*.zip"/>
     </delete>
   </target>

  <target name="hasConfigFile" depends="optionInstallConfigFile">
   <condition property="noConfigFile">
       <not>
         <available file="${targetDir}/config/gus.config" />
       </not>
    </condition>  

    <fail if="noConfigFile">
      Error: No gus.config file. Please run "mkdir -p ${targetDir}/config; cp ${projectsDir}/install/gus.config.sample ${targetDir}/config/gus.config" and edit ${targetDir}/config/gus.config as appropriate for your environment before try again.
    </fail>

  </target>  

  <target name="optionInstallConfigFile" if="installConfigFile">
    <mkdir dir="${targetDir}/config"/>
    <copy file="${projectsDir}/install/gus.config.sample" tofile="${targetDir}/config/gus.config" overwrite="false" verbose="true" />
  </target>

  <target name="checkoutProj" if="checkout">
    <echo>Top level check out</echo>
    <antcall target="cvsCheckOut">
      <param name="package" value="${proj}"/>
    </antcall>
  </target>  

  <target name="selfBuildInfo">
    <property name="project" value="install"/>
    <property name="component" value=""/>
    <antcall target="buildInfo" />
  </target>
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooo  SUBROUTINES  ooooooooooooooooooooooooooo -->
  <!-- oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->

  <target name="defaultC-CodeMakeInstall">
    <exec executable="/usr/bin/make" dir="${projectsDir}/${project}/${component}/src/c">
      <arg line="all" />
    </exec>
  </target>

  <!-- oooooooooooooooooooo default project install ooooooooooooooooooooooo -->

  <target name="defaultProjectInstall">
    <concat destfile="${targetDir}/versions" append="yes">
      <fileset dir="${projectsDir}/${project}" >
         <include name="version"/>
      </fileset>
    </concat>
    
    <!-- all Maven-based components are built at the project level -->
    <!-- KLUGE: disable this by default for now, so must call this target explicitly in
           project build files (probably before installing non-maven components). -->
    <!-- <antcall target="mavenCleanInstall"/> -->
  </target>

  <!-- ooooooooooooooooooo default component install oooooooooooooooooooooo -->

  <target name="defaultComponentInstall">
    <property name="componentDir" value="${projectsDir}/${project}/${component}"/>

    <echo message="."/>
    <echo message="Installing ${project}/${component}"/>

    <available property="componentAvail" file="${projectsDir}/${project}/${component}"/>
    <fail unless="componentAvail">
       Component directory ${projectsDir}/${project}/${component} not found.
    </fail>
    
    <antcall target="componentPartCopy">
      <param name="part" value="bin"/>
      <param name="to" value="bin"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/xml"/>
      <param name="to" value="lib/xml"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/rng"/>
      <param name="to" value="lib/rng"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/dst"/>
      <param name="to" value="lib/dst"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/gbrowse"/>
      <param name="to" value="lib/gbrowse"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/xsl"/>
      <param name="to" value="lib/xsl"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/sql"/>
      <param name="to" value="lib/sql"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/wdk"/>
      <param name="to" value="lib/wdk"/>
      <param name="prefix" value=""/>
    </antcall>

    <chmod perm="+x">
      <fileset dir="${targetDir}/bin"/>
    </chmod>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/perl"/>
      <param name="to" value="lib/perl"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/R"/>
      <param name="to" value="lib/R"/>
      <param name="prefix" value="${component}/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="lib/java"/>
      <param name="to" value="lib/java"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="plugin/perl"/>
      <param name="to" value="lib/perl"/>
      <param name="prefix" value="${project}/${component}/Plugin/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="plugin"/>
      <param name="to" value="lib"/>
      <param name="exclude" value="perl"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="config"/>
      <param name="to" value="config"/>
      <param name="prefix" value=""/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="doc"/>
      <param name="to" value="doc"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

    <antcall target="componentPartCopy">
      <param name="part" value="test"/>
      <param name="to" value="test"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>
   
   <antcall target="defaultJavaCompile"/>
   
   <antcall target="componentPartCopy">
      <param name="part" value="data"/>
      <param name="to" value="data"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

   <antcall target="componentPartCopy">
      <param name="part" value="lib/pipelines"/>
      <param name="to" value="lib/pipelines"/>
      <param name="prefix" value="${project}/${component}/"/>
    </antcall>

    <antcall target="buildInfo" />

  </target>
  
  <target name="defaultJavaCompile" if="isNonMavenJava" depends="deleteMyClasses,checkNonMavenJava">
    <!--  <echo message="Java source found in non-maven project.  Building traditional way..."/> -->
     <mkdir dir="${projectsDir}/${project}/${component}/classes"/>
     <mkdir dir="${targetDir}/lib/java"/>
     <mkdir dir="${targetDir}/lib/java/db_driver"/>
     <mkdir dir="${targetDir}/lib/java/not-deployed"/>
     <javac srcdir="${projectsDir}/${project}/${component}/src/java" 
            destdir="${projectsDir}/${project}/${component}/classes"
        debug="on"
        fork="true"
        tempdir="${projectsDir}/${project}/${component}/classes"
        memoryMaximumSize="256m">
        <classpath>
           <fileset dir="${targetDir}/lib/java/">
              <include name="*.jar"/>
           </fileset>
           <fileset dir="${targetDir}/lib/java/db_driver">
              <include name="*.jar"/>
           </fileset>
           <fileset dir="${targetDir}/lib/java/db_driver">
              <include name="*.zip"/>
           </fileset>
           <fileset dir="${targetDir}/lib/java/not-deployed">
              <include name="*.jar"/>
           </fileset>
        </classpath>
     </javac>
     <copy todir="${projectsDir}/${project}/${component}/classes/META-INF">
       <fileset dir="${componentDir}" >
         <include name="META-INF/**"/>
         <exclude name="**/CVS/*" />
       </fileset>
     </copy>
     <jar basedir="${projectsDir}/${project}/${component}/classes" 
          destfile="${targetDir}/lib/java/${project}-${component}.jar"/>
  </target>   

  <target name="checkNonMavenJava" depends="checkIfMavenComponent,checkIfHaveJava">
    <condition property="isNonMavenJava">
      <and>
        <not>
          <isset property="isMavenComponent"/>
        </not>
        <isset property="hasJava"/>
      </and>
    </condition>
  </target>
  
  <target name="checkIfHaveJava">
      <available property="hasJava" file="${projectsDir}/${project}/${component}/src/java"/>
  </target>

  <target name="checkIfCleanAndHaveJava" depends="checkIfHaveJava">
       <condition property="cleanAndHasJava">
          <and>
             <isset property="hasJava"/>
             <isset property="clean"/>
          </and>
       </condition>
  </target>

  <target name="deleteMyClasses" if="cleanAndHasJava" 
           depends="checkIfCleanAndHaveJava">
    <delete>
      <fileset dir="${projectsDir}/${project}/${component}/classes"/>
    </delete>
    <delete file="${targetDir}/lib/java/${project}-${component}.jar"/>
    <echo message="deleted all old classes, clean is ${clean} and has java is ${hasJava}"/>
  </target>

  <!-- oooooooooooooooooooo default web install ooooooooooooooooooooooooooo -->

  <target name="defaultWebComponentInstall">
    <property name="componentDir" value="${projectsDir}/${project}/${component}"/>

    <echo message="."/>
    <echo message="Installing web ${project}/${component}"/>

    <available property="componentAvail" file="${projectsDir}/${project}/${component}"/>
    <fail unless="componentAvail">
       Component directory ${projectsDir}/${project}/${component} not found.
    </fail>

<!-- if the file exists, it does not copy over -->
    <antcall target="webComponentPartCopy">
      <param name="part" value="htdocs"/>
      <param name="to" value="${htdocsTargetDir}"/>
    </antcall>

    <antcall target="webComponentPartCopy">
      <param name="part" value="html"/>
      <param name="to" value="${htdocsTargetDir}"/>
    </antcall>

    <antcall target="webComponentPartCopy">
      <param name="part" value="cgi-bin"/>
      <param name="to" value="${cgibinTargetDir}"/>
    </antcall>

    <antcall target="webComponentPartCopy">
      <param name="part" value="cgi-lib"/>
      <param name="to" value="${cgilibTargetDir}"/>
    </antcall>

    <antcall target="webComponentPartCopy">
      <param name="part" value="conf"/>
      <param name="to" value="${confTargetDir}"/>
    </antcall>

    <antcall target="webComponentPartCopy">
      <param name="part" value="webapp"/>
      <param name="to" value="${webappTargetDir}"/>
    </antcall>

    <antcall target="webComponentPartCopy">
      <param name="part" value="servlets"/>
      <param name="to" value="${servletsTargetDir}"/>
    </antcall>

    <antcall target="buildInfo" />

  </target>  

  <!-- ooooooooooooooooooo Maven-related targets ooooooooooooooooooooooo -->

  <target name="checkIfMavenProject">
    <available property="isMavenProject" file="${projectsDir}/${project}/pom.xml"/>
  </target>

  <target name="checkIfMavenComponent">
    <available property="isMavenComponent" file="${projectsDir}/${project}/${component}/pom.xml"/>
  </target>
  
  <target name="mavenCleanInstall" if="isMavenProject" depends="checkIfMavenProject">
  
    <!-- build the project with maven -->
    <exec dir="${projectsDir}/${project}"
           executable="mvn"
           failonerror="true"
           failifexecutionfails="true">
       <arg line="clean"/>
       <arg line="install"/>
       <arg line="--quiet"/>
       <arg line="-Dmaven.test.skip=true"/>
    </exec>
    
  </target>
  
  <target name="deployMavenArtifacts">

    <!-- copy generated build file to gus_home -->
    <copy todir="${targetDir}/lib/java" flatten="true">
      <fileset dir="${projectsDir}/${project}/${module}/target" >
        <include name="*.jar"/>
        <include name="*.war"/>
        <include name="*.ear"/>
      </fileset>
    </copy>
    
    <!-- gather dependencies from this maven project -->
    <artifact:dependencies filesetId="depsFileset" useScope="runtime">
      <pom file="${projectsDir}/${project}/${module}/pom.xml"/>
    </artifact:dependencies>

    <!-- copy dependency jars to gus_home lib -->
    <copy todir="${targetDir}/lib/java" flatten="true">
      <fileset refid="depsFileset"/>
    </copy>
  
  </target>
  
  <!-- oooooooooooooooooooo utility subroutines  ooooooooooooooooooooooo -->

  <target name="componentPartCopy">
    <available property="partAvailable" file="${componentDir}/${part}"/>
    <antcall target="componentPartCopySub"/>
  </target>  

  <target name="componentPartCopySub" if="partAvailable">
    <mkdir dir="${targetDir}/${to}/${prefix}"/>
    
    <copy todir="${targetDir}/${to}/${prefix}">
      <fileset dir="${componentDir}/${part}" >
        <include name="**"/>
        <exclude name="**/CVS/*" />
        <exclude name="${exclude}/" />
      </fileset>
    </copy>
  </target>  

  <target name="webComponentPartCopy">
    <available property="partAvailable" file="${componentDir}/${part}"/>
    <antcall target="webComponentPartCopySub"/>
  </target>  

  <target name="webComponentPartCopySub" if="partAvailable">
    <mkdir dir="${to}"/>

    <copy todir="${to}">
      <fileset dir="${componentDir}/${part}" >
        <include name="**"/>
        <exclude name="**/CVS/*" />
        <exclude name="${exclude}/" />
      </fileset>
    </copy>
  </target>  

  <target name="configFile">
    <property name="cFile" value="${cFileSrcDir}/${cFileName}"/>
    <property name="cFileTarget" value="${targetDir}/config/${cFileName}"/>

    <copy file="${cFile}" toDir="${targetDir}/config"/>

    <available file="${cFileTarget}" property="cFileTargetExists"/>

    <fail unless="cFileTargetExists">
      Error: You must configure the file ${cFileTarget}.  To create it, copy ${cFileTarget}.sample to ${cFileTarget} and edit ${cFileTarget}, giving it the proper values for your installation. 
    </fail>
  </target>  

  <target name="webinstall-postprocess">

    <antcall target="webinstall-cgi-bin" />
    <antcall target="webinstall-webapp" />

  </target>

  <target name="webinstall-cgi-bin" if="cgibinTargetDir">

    <replace dir="${cgibinTargetDir}" 
             propertyFile="${targetDir}/config/gus.config" > 
      <include name="**/*" />
      <replacefilter token="@perl@" property="perl"/>
      <replacefilter token="@targetDir@" value="${targetDir}" />
    </replace> 

    <!-- because the replace task clobbers permissions.  see ant bug #5661 -->
    <chmod perm="+x">
      <fileset dir="${cgibinTargetDir}" />
    </chmod>

  </target>

  <target name="webinstall-webapp" if="webappTargetDir">

    <echo>Copying default and custom tags...</echo>

    <mkdir dir="${webappTargetDir}/WEB-INF/tags/imp"/>

    <!--  remove all tags first -->
    <delete>
      <fileset dir="${webappTargetDir}/WEB-INF/tags/imp" includes="*.tag"/>
    </delete>

    <!-- need to copy the default tags from WDK first -->
    <copy todir="${webappTargetDir}/WEB-INF/tags/imp">
      <fileset dir="${webappTargetDir}/WEB-INF/tags/wdk">
        <include name="*.tag"/>
      </fileset>
    </copy>

    <!-- lastly, copy custom tags from site, and overwrite existing ones -->
    <copy todir="${webappTargetDir}/WEB-INF/tags/imp" overwrite="true">
      <fileset dir="${webappTargetDir}/WEB-INF/tags/site">
        <include name="*.tag"/>
      </fileset>
    </copy>

  </target>

  <target name="webinstall-javascript">

    <echo>Concatenating JavaScript...</echo>
    <concat destfile="${destDir}/${destFilename}">
      <filelist dir="${srcDir}" files="${initialFiles}"/>
      <fileset dir="${srcDir}" includes="**/*.js" excludes="${initialFiles}"/>
    </concat>

    <echo>Minifying JavaScript...</echo>
    <apply executable="java" failonerror="true">
      <fileset dir="${destDir}" includes="${destFilename}"/>
      <arg line="-jar" />
      <arg path="${targetDir}/lib/java/yuicompressor-2.4.7.jar" />
      <!-- <arg line="${yuicompressor.options}" /> -->
      <srcfile />
      <arg line="-o" />
      <mapper type="glob" from="*.js" to="${webappTargetDir}/wdk/js/*-min.js"/>
      <targetfile />
    </apply>

  </target>
  
  <target name="buildInfo" depends="svnInfo,recordBuildState" />

  <target name="recordBuildState">

    <condition property="svninfo" value="${svnInfoOut}">
      <isset property="svnInfoOut"/>
    </condition>
    <condition property="svninfo" value="NA">
      <not><isset property="svnInfoOut"/></not>
    </condition>

    <condition property="svnstat" value="${svnStatOut}">
      <isset property="svnStatOut"/>
    </condition>
    <condition property="svnstat" value="NA">
      <not><isset property="svnStatOut"/></not>
    </condition>

    <tstamp>
      <format property="tstamp" pattern="yyyy/MM/dd HH:mm:ss"/>
    </tstamp>
  
    <propertyfile comment="Build Information"
                  file="${targetDir}/config/.build.info">
      <entry key="!Last.build.initialTarget"
             value="${initialTarget}"/>
      <entry key="!Last.build.component"
             value="${proj}${comp}"/>
      <entry key="!Last.build.timestamp"
             value="${tstamp}"/>
      <entry key="!Last.build"
             value="${proj}${comp} @ ${tstamp}"/>
      <entry key="${project}.${component}.buildtime"
             type="date"
             pattern="yyyy/MM/dd HH:mm:ss"
             value="now"/>
      <entry key="${project}.svn.info"
             value="${svninfo}"/>
      <entry key="${project}.svn.status"
             value="${svnstat}"/>
    </propertyfile>
  </target>  

  <target name="svnInfo" if="can.do.svn" depends="canDoSvn">
    <exec dir="${projectsDir}" 
           executable="sh"
           outputproperty="svnInfoOut"
           failonerror="false"
           failifexecutionfails="false">
       <arg line="-c"/>
       <arg line="'svn info ${project} | egrep URL\|Rev\|Date'"/>
    </exec>
    <exec dir="${projectsDir}" 
           executable="sh"
           outputproperty="svnStatOut"
           failonerror="false"
           failifexecutionfails="false">
       <arg line="-c"/>
       <arg line="'svn status ${project}'"/>
    </exec>
  </target>

  <target name="canDoSvn">
      <property environment="env" />
      <condition property="can.do.svn">
         <and>
           <available file="${projectsDir}/${project}/.svn" type="dir" />
           <available file="svn" type="file">
             <filepath>
               <pathelement path="${env.PATH}"/>
             </filepath>
           </available>
         </and>
      </condition>
  </target>

  <!-- oooooooooooooooooooo default project release ooooooooooooooooooooooo -->

  <target name="defaultProjectRelease">

    <delete quiet="true">
        <fileset dir="${projectsDir}/cleanroom"/>
    </delete>
    <mkdir dir="${projectsDir}/cleanroom"/>

    <cvs  cvsRoot="${cvsroot}" command="rtag -b ${tag} ${project}"/>

    <cvs package="install" cvsRoot="${cvsroot}" 
         dest="${projectsDir}/cleanroom" />
    
    <cvs package="${project}" tag="${tag}" cvsRoot="${cvsroot}" 
         dest="${projectsDir}/cleanroom" />
    
    <property name="tarfile" 
              value="${projectsDir}/cleanroom/${project}_${tag}.tar"/>

    <tar destfile="${tarfile}" 
         basedir="${projectsDir}/cleanroom"
         excludes="**/CVS/**"/>

    <gzip zipfile="${tarfile}.gz" src="${tarfile}"/>

  </target>


  <!-- oooooooooooooooooooo default project checkout ooooooooooooooooooooooo -->

  <target name="defaultProjectCheckout">
    
    <!-- the trunkflag is composed properly in the dependencies -->
    <condition property="svnflag" value="trunk">
      <or>
        <not>
          <or>
            <isset property="branch" />
            <isset property="useBranch" />
          </or>
        </not>
        <equals arg1="${useBranch}" arg2="false"/>
      </or>
    </condition>
    <condition property="svnflag" value="branches/${version}">
      <and>
        <or>
          <isset property="branch" />
          <isset property="useBranch" />
        </or>
        <not>
          <equals arg1="${useBranch}" arg2="false"/>
        </not>
      </and>
    </condition>

    <echo> Checking out ${project} (${svnflag}) from ${svnurl}/${svnflag}... </echo>
    
    <!-- check out the project from svn -->
    <exec dir="${projectsDir}" executable="svn">
      <arg line="co ${svnurl}/${svnflag} ${project}"/>
    </exec>

    <!-- try to checkout dependencies -->
    <antcall target="checkoutDependencies" />
  </target>
  
  <target name="checkoutDependencies" unless="excludeChildren">
    <!-- run dependency check out-->
    <ant antfile="${projectsDir}/${project}/build.xml" target="${project}-ChildCheckout">
      <property name="project" value="${project}"/>
      <property name="version" value="${version}"/>
    </ant>
  </target>

  <!-- oooooooooooooooooooo default project update ooooooooooooooooooooooo -->

  <target name="defaultProjectUpdate">
  
    <echo> Update ${projectsDir}/${project}... </echo>

    <!-- detect if the project exist -->
    <available property="project.present" file="${projectsDir}/${proj}" type="dir" />

    <!-- do not update non-existing project -->
    <fail unless="project.present">${proj} hasn't been checked out yet.</fail>

    <!-- check out the project from svn -->
    <exec dir="${projectsDir}/${project}" executable="svn">
      <arg line="update"/>
    </exec>
 
    <!-- try to update dependencies -->
    <antcall target="updateDependencies" />
  </target>

  <target name="updateDependencies" unless="excludeChildren">
    <!-- update the dependencies of the project -->
    <ant antfile="${projectsDir}/${project}/build.xml" target="${project}-ChildUpdate">
      <property name="project" value="${project}"/>
    </ant>
   
  </target>

</project>


